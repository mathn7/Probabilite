var documenterSearchIndex = {"docs":
[{"location":"Sujet_TP1/#TP1-–-Corrélation-entre-pixels-dans-une-image-1","page":"Sujet TP1","title":"TP1 – Corrélation entre pixels dans une image","text":"","category":"section"},{"location":"Sujet_TP3/#TP3-–-Perception-des-formes-dans-une-image-1","page":"Sujet TP3","title":"TP3 – Perception des formes dans une image","text":"","category":"section"},{"location":"Sujet_TP3/#Introduction-1","page":"Sujet TP3","title":"Introduction","text":"","category":"section"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"Dans une image binaire de synthèse, on considère les pixels comme des variables aléatoires iid. Un pixel reçoit la valeur 0(text  pixel noir ) avec la probabilité p ou la valeur 1 (pixel blanc) avec la probabilité 1-p(loi de Bernouilli de parametre p ). Malgré l'indépendance entre pixels, des agglomérats de pixels noirs, en forme de carrés, peuvent apparaítre par le fait du hasard. La probabilité mathcalP(p t) pour qu'un carré de côté t soit noir est égale à p^t^2. Elle diminue très rapidement si les carrés deviennent plus grands, c'est-à-dire lorsque t croít, ou sì les pixels noirs se raréfient, c'est-à-dire lorsque p décroít. Or, un carré noir se distingue d'autant mieux qu'il est plus grand ou que l'image est plus claire (cf. figure 1). Cet exemple très simple illustre le principe général de la perception des formes dans une image : une forme est d'autant plus perceptible qu'elle est moins probable.","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"(Image: ) FIGURE 1- Chacune de ces images binaires de taille 64 times 64 tirées selon une loi de Bernouilli de paramètre p contient un carré noir unique de côté t=5  La probabilité d'apparition mathcalP(p t)=p^t^2 du carré décroít de gauche à droite, ce qui le rend de plus en plus perceptible : notre ceil est attiré par les événements les moins probables!","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"Lancez le script carres_noirs, qui simule une séquence d'images binaires aléatoires de taille 64 times 64 tirées selon une loi de Bernouilli de paramètre p jusqu'à ce qu'une de ces images contienne au moins un carré noir de côté t  Ce script teste plusieurs valeurs de t pour p=05 fixé. Attention : la recherche est de plus en plus longue, puisque la probabilité d'apparition mathcalP(p t)=p^t^2 d'un carré noir décroít fortement lorsque t croít. Néanmoins, plus l'attente est longue, plus la forme \"saute aux yeux\" dans l'image affichée.","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"Comme cela a déjà été vu dans le TP1, les variables aléatoires que constituent les pixels d'une image naturelle ne sont pas iid, mais sont au contraire fortement corrélées. C'est la raison pour laquelle les formes perceptibles sont beaucoup plus courantes dans une image naturelle que dans une image aléatoire. En revanche, il s'agit en général de formes approchées. Il est donc nécessaire de donner une définition plus souple à la notion de forme. Dans une image binaire aléatoire de taille T times T tirée selon une loi de Bernouilli de paramètre p, la probabilité pour qu'un carré de côté t c'est-à-dire constitué de N=t^2 pixels, contienne exactement n leqslant N pixels noirs, est donnée par la loi binomiale mathcalB(p N n)=mathrmC_N^n p^n(1-p)^N-n où mathrmC_N^n désigne le nombre de combinaisons de n éléments parmi N. Par conséquent, la probabilité pour qu'un tel carré contienne au moins n pixels noirs s'écrit :","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"hspace*25cm sum_k=n^N mathcalB(p N k)=sum_k=n^N mathrmC_N^k p^k(1-p)^N-k=1-sum_k=0^n-1 mathrmC_N^k p^k(1-p)^N-k (1) La dernière somme de (1) peut se calculer à l’aide de la fonction binocdf de Matlab (doc binocdf)","category":"page"},{"location":"Sujet_TP3/#Exercice-1-:-détection-de-pixels-voisins-ayant-des-gradients-parallèles-1","page":"Sujet TP3","title":"Exercice 1 : détection de pixels voisins ayant des gradients parallèles","text":"","category":"section"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"Détecter les \"alignements\" dans une image consiste à faire une esquisse constituée de segments de droites. De tels segments se situent là où le module nabla I du gradient du niveau de gris I est élevé. Pour détecter les alignements, il faut donc commencer par calculer le gradient du niveau de gris nabla I, par exemple avec la fonction gradient (axe des abscisses orienté vers la droite, axe des ordonnées vers le bas, unité de longueur = pixel ). Une fois ce gradient calculé, seuls les pixels où sa norme est supérieure à un seuil sont sélectionnés. Parmi ces pixels, on cherche à constituer des ensembles E (cf. figure 2-gauche) tels que :","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"chaque ensemble E soit connexe, au sens des \"8 plus proches voisins\"\nle gradient G_i j=nabla I(i j) en un pixel (i j) de E soit parallèle à la somme G_Sigma des gradients calculée sur les pixels de l'ensemble E en cours de construction, c'est-à-dire fracG_i jleftG_i jright cdot fracG_SigmaleftG_Sigmaright geqslant cos alpha où alpha0 désigne l'angle maximal autorisé entre les vecteurs G_i j et G_Sigma Après avoir lu attentivement le script exercice_1, complétez la fonction recursion, qui permet de construire, par appels récursifs, les ensembles E à partir de k \"germes\". Les figures 2 -centre et 2 -droite montrent le résultat de l'exécution de ce script sur l'image Piree.png (les ensembles E sont affichés sous différentes couleurs).","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"Remarque – Les fonctions ind2sub et sub2ind de Matlab sont très utiles : consultez leur documentation.","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"(Image: ) Figure 2 – À gauche : exemple comportant trois ensembles candidats E. Au centre : image sur laquelle le gradient du niveau de gris est superposé aux pixels de contour. À droite : ensembles candidats E associés.","category":"page"},{"location":"Sujet_TP3/#Exercice-2-:-détection-des-alignements-dans-une-image-1","page":"Sujet TP3","title":"Exercice 2 : détection des alignements dans une image","text":"","category":"section"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"Si la variable aléatoire \"gradient du niveau de gris\" en un pixel suivait une loi uniforme, la probabilité p pour qu'une réalisation fasse un angle inférieur à alpha, relativement à une direction de réference, vaudrait p=frac2 a2 pi=fracapi Soit E un des ensembles de pixels constitués à l'étape précédente. On définit R comme le plus petit rectangle englobant de E de cótés parallèles aux axes principaux de sa matrice d'inertie. Cette matrice est une généralisation de la matrice de variance/covariance, pour laquelle les coordonnées left(x_i y_iright) sont pondérées par pi_i=nabla I_i","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"hspace*25cm barx=frac1Pi sum_i=1^n pi_i x_i  hspace*25cm bary=frac1Pi sum_i=1^n pi_i y_i  hspace*25cm M_11=frac1Pi sum_i=1^n pi_ileft(x_i-barxright)^2  hspace*25cm M_12=frac1Pi sum_i=1^n pi_ileft(x_i-barxright)left(y_i-baryright)  text  etc ","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"où Pi=sum_i=1^n pi_i  Écrivez la fonction matriceinertie, qui doit retourner les coordonnées (barx bary) du centre d'inertie de E et sa matrice d'inertie M puis lancez le script testmatrice_inertie en guise de vérification. Une fois le rectangle R déterminé, on compte le nombre n de pixels (i j) de E où nabla I(i j) fait un angle inférieur à alpha avec la direction du petit axe de R. La probabilité pour que cela se produise en n pixels de R au moins est donnée par (1) où p=fracalphapi et N=operatornamecard(R)  Le critère pour déterminer si un ensemble candidat E forme un alignement détectable s'écrit donc (epsilon ll 1 est un seuil)","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"hspace*25cm 1-sum_k=0^n-1 mathrmC_N^k p^k(1-p)^N-kepsilon","category":"page"},{"location":"Sujet_TP3/#","page":"Sujet TP3","title":"Sujet TP3","text":"Écrivez la fonction calcul_proba, qui doit calculer le premier membre de (3) (le nombre de pixels N doit être entier!). Une fois mis au point sur l'image Piree.png, vous pourrez tester ces deux scripts sur les images chaises.png et Morlaix.png (le calcul est un peu long), ou sur toute autre image de votre choix.","category":"page"},{"location":"Sujet_TP2/#TP2-–-Compression-d’un-signal-1","page":"Sujet TP2","title":"TP2 – Compression d’un signal","text":"","category":"section"},{"location":"#Probabilité-TPs-1ère-année-1","page":"Accueil","title":"Probabilité-TPs 1ère année","text":"","category":"section"},{"location":"#","page":"Accueil","title":"Accueil","text":"Le package Probabilite constitue une  solution des Tps de probabilité de la première année pour l’année 2020-2021 de l'École INP-ENSEEIHT.","category":"page"}]
}
